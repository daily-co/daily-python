[package]
name = "daily-python"
version = "0.18.1"
edition = "2021"
license = "BSD 2-Clause License"
resolver = "2"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "daily"
crate-type = ["cdylib"]

[dependencies]
pyo3 = { version = "0.22.6", features = ["abi3-py37", "py-clone"] }
daily-core = { path = "../daily-core" }
futures = { version = "0.3.31", default-features = false, features = [
  "std",
  "executor",
] }
lazy_static = "1.5.0"
libc = "0.2.171"
serde = { version = "1.0.219", default-features = false, features = ["derive"] }
serde_json = "1.0.140"
tracing = "0.1.41"
uuid = { version = "1.16.0", default-features = false, features = [
  "serde",
  "v4",
] }
webrtc-daily = { path = "../webrtc-daily" }

# You might be wondering why do we need this, since `daily-python` does not
# build for WASM.
# Cargo's crate resolve will check the entire dependency tree regardless of the
# actual build target, and thus will fail to find a `wasm-bindgen` with the
# features we need, since they are not upstreamed yet.
# Because daily-python is not a member of the larger `daily-x` workspace, it
# does not know of the patches that we apply on wasm-bindgen there, so we have
# to tell Cargo again that we're patching all the wasm-bindgen crates.
[patch.crates-io]
wasm-bindgen = { git = "https://github.com/daily-co/wasm-bindgen", branch = "daily-co" }
wasm-bindgen-futures = { git = "https://github.com/daily-co/wasm-bindgen", branch = "daily-co" }
js-sys = { git = "https://github.com/daily-co/wasm-bindgen", branch = "daily-co" }
web-sys = { git = "https://github.com/daily-co/wasm-bindgen", branch = "daily-co" }

[lints.clippy]
# Fix clippy issue bcause of older pyo3 < 0.23.x.
useless_conversion = "allow"
